<?php
/**
 * CAddressSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * cardano-explorer-api
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p>
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CAddressSummary Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CAddressSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CAddressSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ca_address' => 'string',
        'ca_type' => 'string',
        'ca_chain_tip' => '\OpenAPI\Client\Model\InlineResponse2008RightCaChainTip',
        'ca_tx_num' => 'int',
        'ca_balance' => '\OpenAPI\Client\Model\InlineResponse200RightCoin',
        'ca_total_input' => '\OpenAPI\Client\Model\InlineResponse200RightCoin',
        'ca_total_output' => '\OpenAPI\Client\Model\InlineResponse200RightCoin',
        'ca_total_fee' => '\OpenAPI\Client\Model\InlineResponse200RightCoin',
        'ca_tx_list' => '\OpenAPI\Client\Model\InlineResponse2004Right[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'ca_address' => 'base58',
        'ca_type' => null,
        'ca_chain_tip' => null,
        'ca_tx_num' => null,
        'ca_balance' => null,
        'ca_total_input' => null,
        'ca_total_output' => null,
        'ca_total_fee' => null,
        'ca_tx_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ca_address' => 'caAddress',
        'ca_type' => 'caType',
        'ca_chain_tip' => 'caChainTip',
        'ca_tx_num' => 'caTxNum',
        'ca_balance' => 'caBalance',
        'ca_total_input' => 'caTotalInput',
        'ca_total_output' => 'caTotalOutput',
        'ca_total_fee' => 'caTotalFee',
        'ca_tx_list' => 'caTxList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ca_address' => 'setCaAddress',
        'ca_type' => 'setCaType',
        'ca_chain_tip' => 'setCaChainTip',
        'ca_tx_num' => 'setCaTxNum',
        'ca_balance' => 'setCaBalance',
        'ca_total_input' => 'setCaTotalInput',
        'ca_total_output' => 'setCaTotalOutput',
        'ca_total_fee' => 'setCaTotalFee',
        'ca_tx_list' => 'setCaTxList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ca_address' => 'getCaAddress',
        'ca_type' => 'getCaType',
        'ca_chain_tip' => 'getCaChainTip',
        'ca_tx_num' => 'getCaTxNum',
        'ca_balance' => 'getCaBalance',
        'ca_total_input' => 'getCaTotalInput',
        'ca_total_output' => 'getCaTotalOutput',
        'ca_total_fee' => 'getCaTotalFee',
        'ca_tx_list' => 'getCaTxList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CA_TYPE_C_PUB_KEY_ADDRESS = 'CPubKeyAddress';
    const CA_TYPE_C_REDEEM_ADDRESS = 'CRedeemAddress';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCaTypeAllowableValues()
    {
        return [
            self::CA_TYPE_C_PUB_KEY_ADDRESS,
            self::CA_TYPE_C_REDEEM_ADDRESS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ca_address'] = isset($data['ca_address']) ? $data['ca_address'] : null;
        $this->container['ca_type'] = isset($data['ca_type']) ? $data['ca_type'] : null;
        $this->container['ca_chain_tip'] = isset($data['ca_chain_tip']) ? $data['ca_chain_tip'] : null;
        $this->container['ca_tx_num'] = isset($data['ca_tx_num']) ? $data['ca_tx_num'] : null;
        $this->container['ca_balance'] = isset($data['ca_balance']) ? $data['ca_balance'] : null;
        $this->container['ca_total_input'] = isset($data['ca_total_input']) ? $data['ca_total_input'] : null;
        $this->container['ca_total_output'] = isset($data['ca_total_output']) ? $data['ca_total_output'] : null;
        $this->container['ca_total_fee'] = isset($data['ca_total_fee']) ? $data['ca_total_fee'] : null;
        $this->container['ca_tx_list'] = isset($data['ca_tx_list']) ? $data['ca_tx_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ca_address'] === null) {
            $invalidProperties[] = "'ca_address' can't be null";
        }
        if ($this->container['ca_type'] === null) {
            $invalidProperties[] = "'ca_type' can't be null";
        }
        $allowedValues = $this->getCaTypeAllowableValues();
        if (!is_null($this->container['ca_type']) && !in_array($this->container['ca_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ca_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['ca_chain_tip'] === null) {
            $invalidProperties[] = "'ca_chain_tip' can't be null";
        }
        if ($this->container['ca_tx_num'] === null) {
            $invalidProperties[] = "'ca_tx_num' can't be null";
        }
        if (($this->container['ca_tx_num'] < 0)) {
            $invalidProperties[] = "invalid value for 'ca_tx_num', must be bigger than or equal to 0.";
        }

        if ($this->container['ca_balance'] === null) {
            $invalidProperties[] = "'ca_balance' can't be null";
        }
        if ($this->container['ca_total_input'] === null) {
            $invalidProperties[] = "'ca_total_input' can't be null";
        }
        if ($this->container['ca_total_output'] === null) {
            $invalidProperties[] = "'ca_total_output' can't be null";
        }
        if ($this->container['ca_total_fee'] === null) {
            $invalidProperties[] = "'ca_total_fee' can't be null";
        }
        if ($this->container['ca_tx_list'] === null) {
            $invalidProperties[] = "'ca_tx_list' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ca_address
     *
     * @return string
     */
    public function getCaAddress()
    {
        return $this->container['ca_address'];
    }

    /**
     * Sets ca_address
     *
     * @param string $ca_address ca_address
     *
     * @return $this
     */
    public function setCaAddress($ca_address)
    {
        $this->container['ca_address'] = $ca_address;

        return $this;
    }

    /**
     * Gets ca_type
     *
     * @return string
     */
    public function getCaType()
    {
        return $this->container['ca_type'];
    }

    /**
     * Sets ca_type
     *
     * @param string $ca_type ca_type
     *
     * @return $this
     */
    public function setCaType($ca_type)
    {
        $allowedValues = $this->getCaTypeAllowableValues();
        if (!in_array($ca_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ca_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ca_type'] = $ca_type;

        return $this;
    }

    /**
     * Gets ca_chain_tip
     *
     * @return \OpenAPI\Client\Model\InlineResponse2008RightCaChainTip
     */
    public function getCaChainTip()
    {
        return $this->container['ca_chain_tip'];
    }

    /**
     * Sets ca_chain_tip
     *
     * @param \OpenAPI\Client\Model\InlineResponse2008RightCaChainTip $ca_chain_tip ca_chain_tip
     *
     * @return $this
     */
    public function setCaChainTip($ca_chain_tip)
    {
        $this->container['ca_chain_tip'] = $ca_chain_tip;

        return $this;
    }

    /**
     * Gets ca_tx_num
     *
     * @return int
     */
    public function getCaTxNum()
    {
        return $this->container['ca_tx_num'];
    }

    /**
     * Sets ca_tx_num
     *
     * @param int $ca_tx_num ca_tx_num
     *
     * @return $this
     */
    public function setCaTxNum($ca_tx_num)
    {

        if (($ca_tx_num < 0)) {
            throw new \InvalidArgumentException('invalid value for $ca_tx_num when calling CAddressSummary., must be bigger than or equal to 0.');
        }

        $this->container['ca_tx_num'] = $ca_tx_num;

        return $this;
    }

    /**
     * Gets ca_balance
     *
     * @return \OpenAPI\Client\Model\InlineResponse200RightCoin
     */
    public function getCaBalance()
    {
        return $this->container['ca_balance'];
    }

    /**
     * Sets ca_balance
     *
     * @param \OpenAPI\Client\Model\InlineResponse200RightCoin $ca_balance ca_balance
     *
     * @return $this
     */
    public function setCaBalance($ca_balance)
    {
        $this->container['ca_balance'] = $ca_balance;

        return $this;
    }

    /**
     * Gets ca_total_input
     *
     * @return \OpenAPI\Client\Model\InlineResponse200RightCoin
     */
    public function getCaTotalInput()
    {
        return $this->container['ca_total_input'];
    }

    /**
     * Sets ca_total_input
     *
     * @param \OpenAPI\Client\Model\InlineResponse200RightCoin $ca_total_input ca_total_input
     *
     * @return $this
     */
    public function setCaTotalInput($ca_total_input)
    {
        $this->container['ca_total_input'] = $ca_total_input;

        return $this;
    }

    /**
     * Gets ca_total_output
     *
     * @return \OpenAPI\Client\Model\InlineResponse200RightCoin
     */
    public function getCaTotalOutput()
    {
        return $this->container['ca_total_output'];
    }

    /**
     * Sets ca_total_output
     *
     * @param \OpenAPI\Client\Model\InlineResponse200RightCoin $ca_total_output ca_total_output
     *
     * @return $this
     */
    public function setCaTotalOutput($ca_total_output)
    {
        $this->container['ca_total_output'] = $ca_total_output;

        return $this;
    }

    /**
     * Gets ca_total_fee
     *
     * @return \OpenAPI\Client\Model\InlineResponse200RightCoin
     */
    public function getCaTotalFee()
    {
        return $this->container['ca_total_fee'];
    }

    /**
     * Sets ca_total_fee
     *
     * @param \OpenAPI\Client\Model\InlineResponse200RightCoin $ca_total_fee ca_total_fee
     *
     * @return $this
     */
    public function setCaTotalFee($ca_total_fee)
    {
        $this->container['ca_total_fee'] = $ca_total_fee;

        return $this;
    }

    /**
     * Gets ca_tx_list
     *
     * @return \OpenAPI\Client\Model\InlineResponse2004Right[]
     */
    public function getCaTxList()
    {
        return $this->container['ca_tx_list'];
    }

    /**
     * Sets ca_tx_list
     *
     * @param \OpenAPI\Client\Model\InlineResponse2004Right[] $ca_tx_list ca_tx_list
     *
     * @return $this
     */
    public function setCaTxList($ca_tx_list)
    {
        $this->container['ca_tx_list'] = $ca_tx_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


