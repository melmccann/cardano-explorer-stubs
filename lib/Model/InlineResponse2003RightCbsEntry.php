<?php
/**
 * InlineResponse2003RightCbsEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  melmccann\cardanoexplorer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * cardano-explorer-api
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p>
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace melmccann\cardanoexplorer\Model;

use \ArrayAccess;
use \melmccann\cardanoexplorer\ObjectSerializer;

/**
 * InlineResponse2003RightCbsEntry Class Doc Comment
 *
 * @category Class
 * @package  melmccann\cardanoexplorer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse2003RightCbsEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_3_Right_cbsEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cbe_epoch' => 'int',
        'cbe_slot' => 'int',
        'cbe_blk_height' => 'int',
        'cbe_blk_hash' => 'string',
        'cbe_time_issued' => 'int',
        'cbe_tx_num' => 'int',
        'cbe_total_sent' => '\melmccann\cardanoexplorer\Model\InlineResponse200RightCoin',
        'cbe_size' => 'int',
        'cbe_block_lead' => 'string',
        'cbe_fees' => '\melmccann\cardanoexplorer\Model\InlineResponse200RightCoin'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'cbe_epoch' => null,
        'cbe_slot' => null,
        'cbe_blk_height' => null,
        'cbe_blk_hash' => 'base16',
        'cbe_time_issued' => 'POSIX',
        'cbe_tx_num' => null,
        'cbe_total_sent' => null,
        'cbe_size' => null,
        'cbe_block_lead' => 'base16',
        'cbe_fees' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cbe_epoch' => 'cbeEpoch',
        'cbe_slot' => 'cbeSlot',
        'cbe_blk_height' => 'cbeBlkHeight',
        'cbe_blk_hash' => 'cbeBlkHash',
        'cbe_time_issued' => 'cbeTimeIssued',
        'cbe_tx_num' => 'cbeTxNum',
        'cbe_total_sent' => 'cbeTotalSent',
        'cbe_size' => 'cbeSize',
        'cbe_block_lead' => 'cbeBlockLead',
        'cbe_fees' => 'cbeFees'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cbe_epoch' => 'setCbeEpoch',
        'cbe_slot' => 'setCbeSlot',
        'cbe_blk_height' => 'setCbeBlkHeight',
        'cbe_blk_hash' => 'setCbeBlkHash',
        'cbe_time_issued' => 'setCbeTimeIssued',
        'cbe_tx_num' => 'setCbeTxNum',
        'cbe_total_sent' => 'setCbeTotalSent',
        'cbe_size' => 'setCbeSize',
        'cbe_block_lead' => 'setCbeBlockLead',
        'cbe_fees' => 'setCbeFees'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cbe_epoch' => 'getCbeEpoch',
        'cbe_slot' => 'getCbeSlot',
        'cbe_blk_height' => 'getCbeBlkHeight',
        'cbe_blk_hash' => 'getCbeBlkHash',
        'cbe_time_issued' => 'getCbeTimeIssued',
        'cbe_tx_num' => 'getCbeTxNum',
        'cbe_total_sent' => 'getCbeTotalSent',
        'cbe_size' => 'getCbeSize',
        'cbe_block_lead' => 'getCbeBlockLead',
        'cbe_fees' => 'getCbeFees'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cbe_epoch'] = isset($data['cbe_epoch']) ? $data['cbe_epoch'] : null;
        $this->container['cbe_slot'] = isset($data['cbe_slot']) ? $data['cbe_slot'] : null;
        $this->container['cbe_blk_height'] = isset($data['cbe_blk_height']) ? $data['cbe_blk_height'] : null;
        $this->container['cbe_blk_hash'] = isset($data['cbe_blk_hash']) ? $data['cbe_blk_hash'] : null;
        $this->container['cbe_time_issued'] = isset($data['cbe_time_issued']) ? $data['cbe_time_issued'] : null;
        $this->container['cbe_tx_num'] = isset($data['cbe_tx_num']) ? $data['cbe_tx_num'] : null;
        $this->container['cbe_total_sent'] = isset($data['cbe_total_sent']) ? $data['cbe_total_sent'] : null;
        $this->container['cbe_size'] = isset($data['cbe_size']) ? $data['cbe_size'] : null;
        $this->container['cbe_block_lead'] = isset($data['cbe_block_lead']) ? $data['cbe_block_lead'] : null;
        $this->container['cbe_fees'] = isset($data['cbe_fees']) ? $data['cbe_fees'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cbe_epoch'] === null) {
            $invalidProperties[] = "'cbe_epoch' can't be null";
        }
        if (($this->container['cbe_epoch'] < 0)) {
            $invalidProperties[] = "invalid value for 'cbe_epoch', must be bigger than or equal to 0.";
        }

        if ($this->container['cbe_slot'] === null) {
            $invalidProperties[] = "'cbe_slot' can't be null";
        }
        if (($this->container['cbe_slot'] > 65535)) {
            $invalidProperties[] = "invalid value for 'cbe_slot', must be smaller than or equal to 65535.";
        }

        if (($this->container['cbe_slot'] < 0)) {
            $invalidProperties[] = "invalid value for 'cbe_slot', must be bigger than or equal to 0.";
        }

        if ($this->container['cbe_blk_height'] === null) {
            $invalidProperties[] = "'cbe_blk_height' can't be null";
        }
        if (($this->container['cbe_blk_height'] < 0)) {
            $invalidProperties[] = "invalid value for 'cbe_blk_height', must be bigger than or equal to 0.";
        }

        if ($this->container['cbe_blk_hash'] === null) {
            $invalidProperties[] = "'cbe_blk_hash' can't be null";
        }
        if ((mb_strlen($this->container['cbe_blk_hash']) > 64)) {
            $invalidProperties[] = "invalid value for 'cbe_blk_hash', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['cbe_blk_hash']) < 64)) {
            $invalidProperties[] = "invalid value for 'cbe_blk_hash', the character length must be bigger than or equal to 64.";
        }

        if (!preg_match("/^[0-9a-f]{64}$/", $this->container['cbe_blk_hash'])) {
            $invalidProperties[] = "invalid value for 'cbe_blk_hash', must be conform to the pattern /^[0-9a-f]{64}$/.";
        }

        if ($this->container['cbe_tx_num'] === null) {
            $invalidProperties[] = "'cbe_tx_num' can't be null";
        }
        if (($this->container['cbe_tx_num'] < 0)) {
            $invalidProperties[] = "invalid value for 'cbe_tx_num', must be bigger than or equal to 0.";
        }

        if ($this->container['cbe_total_sent'] === null) {
            $invalidProperties[] = "'cbe_total_sent' can't be null";
        }
        if ($this->container['cbe_size'] === null) {
            $invalidProperties[] = "'cbe_size' can't be null";
        }
        if (($this->container['cbe_size'] < 0)) {
            $invalidProperties[] = "invalid value for 'cbe_size', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cbe_block_lead']) && (mb_strlen($this->container['cbe_block_lead']) > 64)) {
            $invalidProperties[] = "invalid value for 'cbe_block_lead', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['cbe_block_lead']) && (mb_strlen($this->container['cbe_block_lead']) < 64)) {
            $invalidProperties[] = "invalid value for 'cbe_block_lead', the character length must be bigger than or equal to 64.";
        }

        if (!is_null($this->container['cbe_block_lead']) && !preg_match("/^[0-9a-f]{64}$/", $this->container['cbe_block_lead'])) {
            $invalidProperties[] = "invalid value for 'cbe_block_lead', must be conform to the pattern /^[0-9a-f]{64}$/.";
        }

        if ($this->container['cbe_fees'] === null) {
            $invalidProperties[] = "'cbe_fees' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cbe_epoch
     *
     * @return int
     */
    public function getCbeEpoch()
    {
        return $this->container['cbe_epoch'];
    }

    /**
     * Sets cbe_epoch
     *
     * @param int $cbe_epoch cbe_epoch
     *
     * @return $this
     */
    public function setCbeEpoch($cbe_epoch)
    {

        if (($cbe_epoch < 0)) {
            throw new \InvalidArgumentException('invalid value for $cbe_epoch when calling InlineResponse2003RightCbsEntry., must be bigger than or equal to 0.');
        }

        $this->container['cbe_epoch'] = $cbe_epoch;

        return $this;
    }

    /**
     * Gets cbe_slot
     *
     * @return int
     */
    public function getCbeSlot()
    {
        return $this->container['cbe_slot'];
    }

    /**
     * Sets cbe_slot
     *
     * @param int $cbe_slot cbe_slot
     *
     * @return $this
     */
    public function setCbeSlot($cbe_slot)
    {

        if (($cbe_slot > 65535)) {
            throw new \InvalidArgumentException('invalid value for $cbe_slot when calling InlineResponse2003RightCbsEntry., must be smaller than or equal to 65535.');
        }
        if (($cbe_slot < 0)) {
            throw new \InvalidArgumentException('invalid value for $cbe_slot when calling InlineResponse2003RightCbsEntry., must be bigger than or equal to 0.');
        }

        $this->container['cbe_slot'] = $cbe_slot;

        return $this;
    }

    /**
     * Gets cbe_blk_height
     *
     * @return int
     */
    public function getCbeBlkHeight()
    {
        return $this->container['cbe_blk_height'];
    }

    /**
     * Sets cbe_blk_height
     *
     * @param int $cbe_blk_height cbe_blk_height
     *
     * @return $this
     */
    public function setCbeBlkHeight($cbe_blk_height)
    {

        if (($cbe_blk_height < 0)) {
            throw new \InvalidArgumentException('invalid value for $cbe_blk_height when calling InlineResponse2003RightCbsEntry., must be bigger than or equal to 0.');
        }

        $this->container['cbe_blk_height'] = $cbe_blk_height;

        return $this;
    }

    /**
     * Gets cbe_blk_hash
     *
     * @return string
     */
    public function getCbeBlkHash()
    {
        return $this->container['cbe_blk_hash'];
    }

    /**
     * Sets cbe_blk_hash
     *
     * @param string $cbe_blk_hash cbe_blk_hash
     *
     * @return $this
     */
    public function setCbeBlkHash($cbe_blk_hash)
    {
        if ((mb_strlen($cbe_blk_hash) > 64)) {
            throw new \InvalidArgumentException('invalid length for $cbe_blk_hash when calling InlineResponse2003RightCbsEntry., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($cbe_blk_hash) < 64)) {
            throw new \InvalidArgumentException('invalid length for $cbe_blk_hash when calling InlineResponse2003RightCbsEntry., must be bigger than or equal to 64.');
        }
        if ((!preg_match("/^[0-9a-f]{64}$/", $cbe_blk_hash))) {
            throw new \InvalidArgumentException("invalid value for $cbe_blk_hash when calling InlineResponse2003RightCbsEntry., must conform to the pattern /^[0-9a-f]{64}$/.");
        }

        $this->container['cbe_blk_hash'] = $cbe_blk_hash;

        return $this;
    }

    /**
     * Gets cbe_time_issued
     *
     * @return int|null
     */
    public function getCbeTimeIssued()
    {
        return $this->container['cbe_time_issued'];
    }

    /**
     * Sets cbe_time_issued
     *
     * @param int|null $cbe_time_issued cbe_time_issued
     *
     * @return $this
     */
    public function setCbeTimeIssued($cbe_time_issued)
    {
        $this->container['cbe_time_issued'] = $cbe_time_issued;

        return $this;
    }

    /**
     * Gets cbe_tx_num
     *
     * @return int
     */
    public function getCbeTxNum()
    {
        return $this->container['cbe_tx_num'];
    }

    /**
     * Sets cbe_tx_num
     *
     * @param int $cbe_tx_num cbe_tx_num
     *
     * @return $this
     */
    public function setCbeTxNum($cbe_tx_num)
    {

        if (($cbe_tx_num < 0)) {
            throw new \InvalidArgumentException('invalid value for $cbe_tx_num when calling InlineResponse2003RightCbsEntry., must be bigger than or equal to 0.');
        }

        $this->container['cbe_tx_num'] = $cbe_tx_num;

        return $this;
    }

    /**
     * Gets cbe_total_sent
     *
     * @return \melmccann\cardanoexplorer\Model\InlineResponse200RightCoin
     */
    public function getCbeTotalSent()
    {
        return $this->container['cbe_total_sent'];
    }

    /**
     * Sets cbe_total_sent
     *
     * @param \melmccann\cardanoexplorer\Model\InlineResponse200RightCoin $cbe_total_sent cbe_total_sent
     *
     * @return $this
     */
    public function setCbeTotalSent($cbe_total_sent)
    {
        $this->container['cbe_total_sent'] = $cbe_total_sent;

        return $this;
    }

    /**
     * Gets cbe_size
     *
     * @return int
     */
    public function getCbeSize()
    {
        return $this->container['cbe_size'];
    }

    /**
     * Sets cbe_size
     *
     * @param int $cbe_size cbe_size
     *
     * @return $this
     */
    public function setCbeSize($cbe_size)
    {

        if (($cbe_size < 0)) {
            throw new \InvalidArgumentException('invalid value for $cbe_size when calling InlineResponse2003RightCbsEntry., must be bigger than or equal to 0.');
        }

        $this->container['cbe_size'] = $cbe_size;

        return $this;
    }

    /**
     * Gets cbe_block_lead
     *
     * @return string|null
     */
    public function getCbeBlockLead()
    {
        return $this->container['cbe_block_lead'];
    }

    /**
     * Sets cbe_block_lead
     *
     * @param string|null $cbe_block_lead cbe_block_lead
     *
     * @return $this
     */
    public function setCbeBlockLead($cbe_block_lead)
    {
        if (!is_null($cbe_block_lead) && (mb_strlen($cbe_block_lead) > 64)) {
            throw new \InvalidArgumentException('invalid length for $cbe_block_lead when calling InlineResponse2003RightCbsEntry., must be smaller than or equal to 64.');
        }
        if (!is_null($cbe_block_lead) && (mb_strlen($cbe_block_lead) < 64)) {
            throw new \InvalidArgumentException('invalid length for $cbe_block_lead when calling InlineResponse2003RightCbsEntry., must be bigger than or equal to 64.');
        }
        if (!is_null($cbe_block_lead) && (!preg_match("/^[0-9a-f]{64}$/", $cbe_block_lead))) {
            throw new \InvalidArgumentException("invalid value for $cbe_block_lead when calling InlineResponse2003RightCbsEntry., must conform to the pattern /^[0-9a-f]{64}$/.");
        }

        $this->container['cbe_block_lead'] = $cbe_block_lead;

        return $this;
    }

    /**
     * Gets cbe_fees
     *
     * @return \melmccann\cardanoexplorer\Model\InlineResponse200RightCoin
     */
    public function getCbeFees()
    {
        return $this->container['cbe_fees'];
    }

    /**
     * Sets cbe_fees
     *
     * @param \melmccann\cardanoexplorer\Model\InlineResponse200RightCoin $cbe_fees cbe_fees
     *
     * @return $this
     */
    public function setCbeFees($cbe_fees)
    {
        $this->container['cbe_fees'] = $cbe_fees;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


