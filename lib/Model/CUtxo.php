<?php
/**
 * CUtxo
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * cardano-explorer-api
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p>
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CUtxo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CUtxo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CUtxo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cu_id' => 'object',
        'cu_out_index' => 'int',
        'cu_address' => 'string',
        'cu_coins' => '\OpenAPI\Client\Model\InlineResponse200RightCoin'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'cu_id' => null,
        'cu_out_index' => null,
        'cu_address' => 'base58',
        'cu_coins' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cu_id' => 'cuId',
        'cu_out_index' => 'cuOutIndex',
        'cu_address' => 'cuAddress',
        'cu_coins' => 'cuCoins'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cu_id' => 'setCuId',
        'cu_out_index' => 'setCuOutIndex',
        'cu_address' => 'setCuAddress',
        'cu_coins' => 'setCuCoins'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cu_id' => 'getCuId',
        'cu_out_index' => 'getCuOutIndex',
        'cu_address' => 'getCuAddress',
        'cu_coins' => 'getCuCoins'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cu_id'] = isset($data['cu_id']) ? $data['cu_id'] : null;
        $this->container['cu_out_index'] = isset($data['cu_out_index']) ? $data['cu_out_index'] : null;
        $this->container['cu_address'] = isset($data['cu_address']) ? $data['cu_address'] : null;
        $this->container['cu_coins'] = isset($data['cu_coins']) ? $data['cu_coins'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cu_id'] === null) {
            $invalidProperties[] = "'cu_id' can't be null";
        }
        if ($this->container['cu_out_index'] === null) {
            $invalidProperties[] = "'cu_out_index' can't be null";
        }
        if (($this->container['cu_out_index'] < 0)) {
            $invalidProperties[] = "invalid value for 'cu_out_index', must be bigger than or equal to 0.";
        }

        if ($this->container['cu_address'] === null) {
            $invalidProperties[] = "'cu_address' can't be null";
        }
        if ($this->container['cu_coins'] === null) {
            $invalidProperties[] = "'cu_coins' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cu_id
     *
     * @return object
     */
    public function getCuId()
    {
        return $this->container['cu_id'];
    }

    /**
     * Sets cu_id
     *
     * @param object $cu_id cu_id
     *
     * @return $this
     */
    public function setCuId($cu_id)
    {
        $this->container['cu_id'] = $cu_id;

        return $this;
    }

    /**
     * Gets cu_out_index
     *
     * @return int
     */
    public function getCuOutIndex()
    {
        return $this->container['cu_out_index'];
    }

    /**
     * Sets cu_out_index
     *
     * @param int $cu_out_index cu_out_index
     *
     * @return $this
     */
    public function setCuOutIndex($cu_out_index)
    {

        if (($cu_out_index < 0)) {
            throw new \InvalidArgumentException('invalid value for $cu_out_index when calling CUtxo., must be bigger than or equal to 0.');
        }

        $this->container['cu_out_index'] = $cu_out_index;

        return $this;
    }

    /**
     * Gets cu_address
     *
     * @return string
     */
    public function getCuAddress()
    {
        return $this->container['cu_address'];
    }

    /**
     * Sets cu_address
     *
     * @param string $cu_address cu_address
     *
     * @return $this
     */
    public function setCuAddress($cu_address)
    {
        $this->container['cu_address'] = $cu_address;

        return $this;
    }

    /**
     * Gets cu_coins
     *
     * @return \OpenAPI\Client\Model\InlineResponse200RightCoin
     */
    public function getCuCoins()
    {
        return $this->container['cu_coins'];
    }

    /**
     * Sets cu_coins
     *
     * @param \OpenAPI\Client\Model\InlineResponse200RightCoin $cu_coins cu_coins
     *
     * @return $this
     */
    public function setCuCoins($cu_coins)
    {
        $this->container['cu_coins'] = $cu_coins;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


