<?php
/**
 * InlineResponse2008RightCaChainTip
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * cardano-explorer-api
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p>
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineResponse2008RightCaChainTip Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse2008RightCaChainTip implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_8_Right_caChainTip';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ct_block_no' => 'int',
        'ct_slot_no' => 'int',
        'ct_block_hash' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'ct_block_no' => null,
        'ct_slot_no' => null,
        'ct_block_hash' => 'base16'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ct_block_no' => 'ctBlockNo',
        'ct_slot_no' => 'ctSlotNo',
        'ct_block_hash' => 'ctBlockHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ct_block_no' => 'setCtBlockNo',
        'ct_slot_no' => 'setCtSlotNo',
        'ct_block_hash' => 'setCtBlockHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ct_block_no' => 'getCtBlockNo',
        'ct_slot_no' => 'getCtSlotNo',
        'ct_block_hash' => 'getCtBlockHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ct_block_no'] = isset($data['ct_block_no']) ? $data['ct_block_no'] : null;
        $this->container['ct_slot_no'] = isset($data['ct_slot_no']) ? $data['ct_slot_no'] : null;
        $this->container['ct_block_hash'] = isset($data['ct_block_hash']) ? $data['ct_block_hash'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['ct_block_no']) && ($this->container['ct_block_no'] < 0)) {
            $invalidProperties[] = "invalid value for 'ct_block_no', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ct_slot_no']) && ($this->container['ct_slot_no'] < 0)) {
            $invalidProperties[] = "invalid value for 'ct_slot_no', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ct_block_hash']) && (mb_strlen($this->container['ct_block_hash']) > 64)) {
            $invalidProperties[] = "invalid value for 'ct_block_hash', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['ct_block_hash']) && (mb_strlen($this->container['ct_block_hash']) < 64)) {
            $invalidProperties[] = "invalid value for 'ct_block_hash', the character length must be bigger than or equal to 64.";
        }

        if (!is_null($this->container['ct_block_hash']) && !preg_match("/^[0-9a-f]{64}$/", $this->container['ct_block_hash'])) {
            $invalidProperties[] = "invalid value for 'ct_block_hash', must be conform to the pattern /^[0-9a-f]{64}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ct_block_no
     *
     * @return int|null
     */
    public function getCtBlockNo()
    {
        return $this->container['ct_block_no'];
    }

    /**
     * Sets ct_block_no
     *
     * @param int|null $ct_block_no ct_block_no
     *
     * @return $this
     */
    public function setCtBlockNo($ct_block_no)
    {

        if (!is_null($ct_block_no) && ($ct_block_no < 0)) {
            throw new \InvalidArgumentException('invalid value for $ct_block_no when calling InlineResponse2008RightCaChainTip., must be bigger than or equal to 0.');
        }

        $this->container['ct_block_no'] = $ct_block_no;

        return $this;
    }

    /**
     * Gets ct_slot_no
     *
     * @return int|null
     */
    public function getCtSlotNo()
    {
        return $this->container['ct_slot_no'];
    }

    /**
     * Sets ct_slot_no
     *
     * @param int|null $ct_slot_no ct_slot_no
     *
     * @return $this
     */
    public function setCtSlotNo($ct_slot_no)
    {

        if (!is_null($ct_slot_no) && ($ct_slot_no < 0)) {
            throw new \InvalidArgumentException('invalid value for $ct_slot_no when calling InlineResponse2008RightCaChainTip., must be bigger than or equal to 0.');
        }

        $this->container['ct_slot_no'] = $ct_slot_no;

        return $this;
    }

    /**
     * Gets ct_block_hash
     *
     * @return string|null
     */
    public function getCtBlockHash()
    {
        return $this->container['ct_block_hash'];
    }

    /**
     * Sets ct_block_hash
     *
     * @param string|null $ct_block_hash ct_block_hash
     *
     * @return $this
     */
    public function setCtBlockHash($ct_block_hash)
    {
        if (!is_null($ct_block_hash) && (mb_strlen($ct_block_hash) > 64)) {
            throw new \InvalidArgumentException('invalid length for $ct_block_hash when calling InlineResponse2008RightCaChainTip., must be smaller than or equal to 64.');
        }
        if (!is_null($ct_block_hash) && (mb_strlen($ct_block_hash) < 64)) {
            throw new \InvalidArgumentException('invalid length for $ct_block_hash when calling InlineResponse2008RightCaChainTip., must be bigger than or equal to 64.');
        }
        if (!is_null($ct_block_hash) && (!preg_match("/^[0-9a-f]{64}$/", $ct_block_hash))) {
            throw new \InvalidArgumentException("invalid value for $ct_block_hash when calling InlineResponse2008RightCaChainTip., must conform to the pattern /^[0-9a-f]{64}$/.");
        }

        $this->container['ct_block_hash'] = $ct_block_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


